# TASK 05

from google.colab import files
files.upload()  


!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!pip install -q kaggle


!kaggle datasets download -d dansbecker/food-101
!unzip -q food-101.zip -d food-101



import os
import cv2
import numpy as np
from tqdm import tqdm
from sklearn.model_selection import train_test_split

DATA_DIR = 'food-101/images'
IMG_SIZE = 128
CLASSES = ['pizza', 'apple_pie', 'guacamole', 'churros', 'fried_rice',
           'hamburger', 'ice_cream', 'ramen', 'samosa', 'spaghetti_bolognese']

X, y = [], []

for label in CLASSES:
    folder_path = os.path.join(DATA_DIR, label)
    images = os.listdir(folder_path)[:300]  #
    for img_name in images:
        img_path = os.path.join(folder_path, img_name)
        img = cv2.imread(img_path)
        img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
        X.append(img)
        y.append(label)

X = np.array(X) / 255.0
y = np.array(y)


from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical

le = LabelEncoder()
y_encoded = le.fit_transform(y)
y_cat = to_categorical(y_encoded)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE, IMG_SIZE, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(len(CLASSES), activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])


X_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=42)

model.fit(X_train, y_train, epochs=10, validation_data=(X_test, y_test), batch_size=32)


loss, acc = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {acc * 100:.2f}%")



calorie_map = {
    'pizza': 266,
    'apple_pie': 237,
    'guacamole': 160,
    'churros': 386,
    'fried_rice': 163,
    'hamburger': 295,
    'ice_cream': 207,
    'ramen': 436,
    'samosa': 262,
    'spaghetti_bolognese': 157
}

def predict_food_and_calories(image_path):
    img = cv2.imread(image_path)
    img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))
    img = np.expand_dims(img / 255.0, axis=0)
    pred = model.predict(img)
    label = CLASSES[np.argmax(pred)]
    calories = calorie_map.get(label, "Unknown")
    print(f"Prediction: {label}, Estimated Calories (100g): {calories}")
